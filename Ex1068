#include <stdio.h>
#include <string.h>
//Criando os nós da Pilha
typedef struct no{
    char dado;
    struct no *seg;
} No;

No *topo = NULL; //Variável global

void PUSH (char caract){ //Empilha
    No *novo = malloc(sizeof(No));
    novo->dado = caract;
    novo->seg = topo;
    topo = novo;
}

void POP(){
    if(topo == NULL){
        return;
    }
    No *temp = topo;
    topo = topo->seg;
    free(temp);
}
void Verific_Parentese(char expr[]){
    //Verificando o TAM da string
    int tam = strlen(expr);

    //Percorrendo toda a string
    for(int i=0; i<tam; i++){
        if(expr[i] == '('){ // Empilhar = PUSH
            PUSH(expr[i]);
        } else if (expr[i] == ')') {  // Verificar se a pilha está vazia antes de desempilhar
            if (topo == NULL) {
                printf("incorrect\n");
                return;
            }
            POP();  // Desempilhar quando encontrar ')'
        }
    }

    // Se a pilha estiver vazia no final, os parênteses estão balanceados
    if (topo == NULL) {
        printf("correct\n");
    } else {
        printf("incorrect\n");
    }

}

int main(){
    int qtd_exp;
    char expr[1000];
    scanf("%d", &qtd_exp);
    getchar(); // Para consumir o caractere '\n' deixado pelo scanf

    for(int i=1; i<=qtd_exp; i++){
        fgets(expr, 1000, stdin);
        Verific_Parentese(expr);
    }

    return 0;
}
